---
title: "Across"
format: html
editor_options: 
  chunk_output_type: console
---

In this lesson, we will introduce the `across()` function, which can be used to apply dplyr functions like mutate, summarize, select, etc to subsets of columns that satisfy certain criteria, such as to all numeric columns, or all columns that start with `age_`.



```{r}
# load the tidyverse and demographics dataset

```


Let's suppose that our task is to **convert all character columns of the demographics data to upper-case**. 

```{r}
# apply toupper() to the string value "abc"

```


Before introducing across, let's first see one way that we could do this using the `map()` functions that we have just learned:

```{r}
# create a copy of demographics

# create a logical vector for identifying character columns using map_chr()

# re-assign the character columns to an upper-case version of themselves 
# using map_df() applied to demographics_tmp[character_cols] with toupper()


# look at demographics_tmp

# look at demographics (it should still have lowercase)

```

While this works, it is fairly convoluted, is hard to read, and involves defining an intermediate variable (`character_cols`) -- in the tidyverse style, it is generally recommended to *avoid* defining intermediate variables whenever possible.





## Introducing across()

We could instead do this kind of operation using a `mutate()` operation in conjunction with `across()`.

Let's figure out the code for just one column first
```{r}
# apply toupper to interview_examination with mutate

```



To do this for *all character* columns, you need to provide `across()` to the argument of your mutate function. The `across()` function has two arguments:

- The first argument is a "select statement" that specifies which columns you want to apply your function to. 

- The second argument is the function name, `toupper`, that we want to apply to all columns that are selected as a result of the first argument.

The result is that `toupper()` is applied to all columns "where" `is.character()` would result in `TRUE`:


```{r}
# use across inside mutate to apply toupper() to all columns 
# where(is.character) is TRUE...

```






## More across examples

### Add 100 to all `age_` columns

If we were to do this to just the `age_years` column, our code would look like:

```{r}
# use mutate to add 100 to age_years

```

To generalize this to all columns that start with `age_` using `across()`, we can use the `starts_with()` select helper, and apply the anonymous function `~{. + 100}`:

```{r}
# use across inside mutate to apply ~{. + 100} to all columns 
# that starts_with("age_")...

```







### Convert `born_usa` and `citizen_usa` to numeric (binary) columns using `ends_with()`


```{r}
# take a look at born_usa and citizen_use using select()

```


```{r}
# use across inside mutate to apply as.numeric to all columns 
# that ends_with("_usa")...

```






### Convert `born_usa` and `citizen_usa` to numeric (binary) columns using a vector of column names

Suppose we had a vector of column names that we wanted to modify using `mutate()`:

```{r}
# define a vector selected_columns with "born_usa" and "citizen_usa"

```

Then we could use `all_of(selected_cols)` in `across()` to apply the function to all columns listed in the `selected_cols` vector as follows:

```{r}
# use across inside mutate to apply as.numeric to all_of(selected_columns)

```







## Select helpers summary

So far we have seen the following "select helpers" that can be used to specify the columns inside `across()`:

- `where()` -- across to all columns that satisfy a logical condition (`across(where(is.character), fun)`)

- `starts_with()` and `ends_with()` -- across all columns that start or ends with a specified string (`across(starts_with("abc"), fun)`)

- `contains()` -- across all columns that contain a specified string (`across(contains("abc"), fun)`)

- `all_of()` and `any_of()` -- across all columns whose names are contained in a character vector, where `all_of()` requires all columns in the vector be present. (`across(all_of(vec_names), fun)`)

- `everything()` -- across all columns

These can also be used within `select()`

```{r}
# select all columns that contain "age"

# select all columns that start with "age"

# select all columns that have a logical type

```








### Exercise

a. For all columns that contain the word "education" (`education_youth` and `education`), add the number 5 to each value

b. For all numeric columns, standardize the values by subtracting the mean and dividing by the standard deviation

c. Compute the average age across all columns that start with `age_` (Hint: use `across()` within `summarize()`)

d. Compute the total number of `TRUE` values in the `born_usa`, `citizen_usa`, and `language_english` columns (Hint: use `across()` within `summarize()`)

