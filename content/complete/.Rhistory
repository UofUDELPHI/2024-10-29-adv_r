cost_report |>
filter(cost_charge_ratio == max(cost_charge_ratio)) |>
select(hospital_name, hospital_city, hospital_state, cost_charge_ratio)
# Chunk 1
#| message: false
library(tidyverse)
cost_report <- read_csv("hospital_cost_report.csv")
setwd("~/Library/CloudStorage/Box-Box/teaching/headlamp/statistics/assessments/1_inference_fundamentals/inference_fundamentals_project_solutions")
# Chunk 1
#| message: false
library(tidyverse)
cost_report <- read_csv("hospital_cost_report.csv")
mean(cost_report$cost_charge_ratio)
sd(cost_report$cost_charge_ratio)
cost_report |>
ggplot() +
geom_histogram(aes(x = cost_charge_ratio),
col = "white") +
geom_vline(xintercept = 1)
cost_report |>
filter(cost_charge_ratio == max(cost_charge_ratio)) |>
select(hospital_name, hospital_city, hospital_state, cost_charge_ratio)
cost_report |>
filter(cost_charge_ratio == min(cost_charge_ratio)) |>
select(hospital_name, hospital_city, hospital_state, cost_charge_ratio)
cost_report |>
mutate(discharges_per_bed = discharges / beds) |>
ggplot(aes(x = rural_urban, y = discharges_per_bed)) +
geom_boxplot()
rural_discharges_per_bed <- cost_report |>
filter(rural_urban == "R") |>
mutate(discharges_per_bed = discharges / beds) |>
pull(discharges_per_bed)
urban_discharges_per_bed <- cost_report |>
filter(rural_urban == "U") |>
mutate(discharges_per_bed = discharges / beds) |>
pull(discharges_per_bed)
t.test(rural_discharges_per_bed, urban_discharges_per_bed)
cost_report |>
mutate(employees_per_bed = full_time_employees / beds) |>
ggplot(aes(x = rural_urban, y = employees_per_bed)) +
geom_boxplot()
t.test(rural_employees_per_bed, urban_employees_per_bed, alternative = "greater")
rural_employees_per_bed <- cost_report |>
filter(rural_urban == "R") |>
mutate(discharges_per_bed = full_time_employees / beds) |>
pull(discharges_per_bed)
urban_employees_per_bed <- cost_report |>
filter(rural_urban == "U") |>
mutate(discharges_per_bed = full_time_employees / beds) |>
pull(discharges_per_bed)
t.test(rural_employees_per_bed, urban_employees_per_bed, alternative = "greater")
cost_report |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
ggplot(aes(x = rural_urban, y = patient_charges_revenue_ratio)) +
geom_boxplot()
t.test(rural_patient_charges_revenue_ratio, urban_patient_charges_revenue_ratio)
rural_patient_charges_revenue_ratio <- cost_report |>
filter(rural_urban == "R") |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
pull(patient_charges_revenue_ratio)
urban_patient_charges_revenue_ratio <- cost_report |>
filter(rural_urban == "U") |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
pull(patient_charges_revenue_ratio)
rural_patient_charges_revenue_ratio <- cost_report |>
filter(rural_urban == "R") |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
pull(patient_charges_revenue_ratio)
urban_patient_charges_revenue_ratio <- cost_report |>
filter(rural_urban == "U") |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
pull(patient_charges_revenue_ratio)
t.test(rural_patient_charges_revenue_ratio, urban_patient_charges_revenue_ratio)
# recreate the plot without the outlier
cost_report |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
filter(patient_charges_revenue_ratio < 1.5) |>
ggplot(aes(x = rural_urban, y = patient_charges_revenue_ratio)) +
geom_boxplot()
# reconduct the test without the outlier
rural_patient_charges_revenue_ratio <- cost_report |>
filter(rural_urban == "R") |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
filter(patient_charges_revenue_ratio < 1.5) |>
pull(patient_charges_revenue_ratio)
urban_patient_charges_revenue_ratio <- cost_report |>
filter(rural_urban == "U") |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
filter(patient_charges_revenue_ratio < 1.5) |>
pull(patient_charges_revenue_ratio)
t.test(rural_patient_charges_revenue_ratio, urban_patient_charges_revenue_ratio)
cost_report |>
mutate(patient_charges_revenue_ratio = patient_charges / patient_revenue) |>
filter(patient_charges_revenue_ratio > 1.5) |>
select(hospital_name, hospital_state, beds, patient_charges, patient_revenue, patient_charges_revenue_ratio)
cost_report |> sample_n(10) |> pull(patient_revenue)
# pull up the help page for n_distinct
?n_distinct
n_distinct(demographics$gender)
# Chunk 1
# load the tidyverse and demographics dataset
library(tidyverse)
demographics <- read_csv("data/demographics.csv")
# apply n_distinct to the "gender" column of demographics
n_distinct(demographics$gender)
setwd("~/Library/CloudStorage/Box-Box/teaching/live_workshops_utah/2024-10-29-adv_r/website/content/complete")
# Chunk 1
# load the tidyverse and demographics dataset
library(tidyverse)
demographics <- read_csv("data/demographics.csv")
# Chunk 2
# pull up the help page for n_distinct
?n_distinct
# apply n_distinct to the "gender" column of demographics
n_distinct(demographics$gender)
# apply n_distinct to the "gender" column of demographics
n_distinct(demographics$gender, na.rm = FALSE)
# apply n_distinct to the "gender" column of demographics
n_distinct(demographics$gender, na.rm = TRUE)
# extract the third entry from my_list
my_list[3]
# Chunk 1
# load the tidyverse and demographics dataset
library(tidyverse)
demographics <- read_csv("data/demographics.csv")
# Chunk 2
# pull up the help page for n_distinct
?n_distinct
# Chunk 3
# apply n_distinct to the "gender" column of demographics
n_distinct(demographics$gender)
# Chunk 4
# use map() to apply n_distinct to every column of demographics
map(demographics, n_distinct)
# Chunk 5
# use map() to apply exp() to the vector c(4, 5, 6)
map(c(4, 5, 6), exp)
# Chunk 6
# define a list called my_list with three elements: 1, 4, and 7
my_list <- list(1, 4, 7)
type(my_list[3])
class(my_list[3])
# ask the class of the object above
class(my_list[3])
my_list[[3]]
# extract the third entry from my_list using []
my_list[3]
my_list[[3]]
# try to add 1 to my_list
my_list + 1
# create a list containing (1) the head of demographics, (2) the value 2, and (3) a vector containing "a" and "b"
my_complex_list <- list(head(demographics), 2, c("a", "b"))
my_complex_list
# create a named version of my_complex_list
my_complex_list <- list(data = head(demographics),
value = 2,
vector = c("a", "b"))
my_complex_list
# extract one of the elements from my_complex_list using $
my_complex_list$data
my_complex_list[["data"]]
demographics_class <- map(demographics, class)
demographics_class
demographics_class$household_income
demographics_class[ncol(demographics)]
demographics_class["household_income"]
# compute the number of missing values in the "pregnant" column of demographics
sum(is.na(demographics$pregnant))
# use a map function to compute the number of missing values in every column
map(demographics, ~{sum(is.na(.))})
map_df(demographics, class)
# apply map_df to demographics to determine the class of each column, outputting a "wide" data frame
map_df(demographics, class)
tibble(col_class = class(demographics$gender))
tibble(col_class = class(demographics$pregnant))
# use tibble() to create a single-column tibble containing the class of demographics$pregnant
tibble(col_class = class(demographics$pregnant))
# modify this code to be the function call in map_df to create a
# long-form data frame
map_df(demographics, ~tibble(col_class = class(.)))
# provide an .id argument to include the original column names as a variable
map_df(demographics, ~tibble(col_class = class(.)), .id = "variable_name")
map_df(demographics,
~tibble(n_missing = sum(is.na(.))),
.id = "variable_name")
# create a bar chart of the number of missing values in each column
map_df(demographics,
~tibble(n_missing = sum(is.na(.))),
.id = "variable_name") |>
arrange(n_missing) |>
mutate(variable_name = fct_inorder(variable_name)) |>
ggplot() +
geom_col(aes(x = variable_name, y = n_missing)) +
scale_y_continuous(expand = c(0, 0)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.5))
# create a bar chart of the number of missing values in each column
# use factors to order the columns by the number of missing values
map_df(demographics,
~tibble(n_missing = sum(is.na(.))),
.id = "variable_name") |>
arrange(n_missing) |>
mutate(variable_name = fct_inorder(variable_name)) |>
ggplot() +
geom_col(aes(x = variable_name, y = n_missing)) +
scale_y_continuous(expand = c(0, 0)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.5))
map_dbl(demographics,
~sum(is.na(.)))
map_dbl(demographics,
~sum(is.na(.)))  |>
enframe()
map_dbl(demographics, ~sum(is.na(.))) |>
enframe()
# apply toupper to "abc"
toupper("abc")
# one way to convert all character columns to uppercase
# create a logical vector for identifying character columns using map_chr()
character_cols <- map_chr(demographics, class) == "character"
character_cols
# look at demographics
demographics
# create a logical vector for identifying character columns using map_chr()
character_cols <- map_chr(demographics, class) == "character"
# re-assign the character columns to an upper-case version of themselves
# using map_df() applied to demographics[character_cols] with toupper()
demographics[character_cols] <- map_df(demographics[character_cols], toupper)
# look at demographics
demographics
# apply toupper to interview_examination with mutate
demographics |> mutate(interview_examination = toupper(interview_examination))
# Chunk 1
# load the tidyverse and demographics dataset
library(tidyverse)
demographics <- read_csv("data/demographics.csv")
head(demographics)
# Chunk 2
# apply toupper() to the string value "abc"
toupper("abc")
# Chunk 3
# create a copy of demographics
demographics_tmp <- demographics
# create a logical vector for identifying character columns using map_chr()
character_cols <- map_chr(demographics_tmp, class) == "character"
# re-assign the character columns to an upper-case version of themselves
# using map_df() applied to demographics_tmp[character_cols] with toupper()
demographics_tmp[character_cols] <- map_df(demographics_tmp[character_cols], toupper)
# look at demographics_tmp
demographics_tmp
# look at demographics (it should still have lowercase)
demographics
# create a new version of demographics
demographics_tmp <- demographics
# apply toupper to interview_examination with mutate
demographics_tmp |> mutate(interview_examination = toupper(interview_examination))
# use across inside mutate to apply toupper() to all columns where(is.character) is TRUE...
demographics |> mutate(across(where(is.character), toupper))
# use across inside mutate to apply as.numeric to all columns
# that ends_with("_usa")...
demographics |> mutate(across(ends_with("_usa"), as.numeric)) |>
print(width = Inf)
# select all columns that contain "age"
demographics |> select(contains("age"))
# select all columns that are logical
demographics |> select(where(is.logical))
demographics |>
mutate(completed_high_school = if_else(
education >= 3,
true = "yes",
false = "no")) |>
select(education, completed_high_school) |>
sample_n(10)
# apply count() to the marital_status column
demographics |> count(marital_status)
# use mutate and case_when() to create marital_status_numeric
# with the values above
demographics |> mutate(marital_status_numeric = case_when(
marital_status == "married" ~ 3,
marital_status == "living_with_partner" ~ 2,
marital_status %in% c("divorced", "widowed", "never_married", "separated") ~ 1)) |>
select(marital_status, marital_status_numeric)
# Chunk 1
# load the tidyverse and the urine_albumin_creatinine NHANES data
library(tidyverse)
labs_data <- read.csv("data/urine_albumin_creatinine.csv")
setwd("~/Library/CloudStorage/Box-Box/teaching/live_workshops_utah/2024-10-29-adv_r/website/content/complete")
labs_data <- read.csv("data/urine_albumin_creatinine.csv")
labs_data <- read.csv("data/urine_albumin_creatinine.csv")
# take a look at the first 10 rows
head(labs_data, 10)
# use pivot_wider() to convert the labs data from a
# long format to a wide format.
# arguments are `names_from` and `values_from`
labs_data_wide <- labs_data |>
pivot_wider(names_from = "lab", values_from = "measurement")
labs_data_wide
# create boxplots using the long format for the measurements from each lab
labs_data |> ggplot() +
geom_boxplot(aes(x = lab, y = measurement))
# create boxplots using the long format for the measurements from each lab
labs_data |> ggplot() +
geom_boxplot(aes(x = lab, y = measurement)) +
scale_y_log10()
demographics <- read_csv("data/demographics.csv")
demographics
demographics |> colnames()
demographics |> pivot_longer(cols = starts_with("education"))
demographics |>
pivot_longer(cols = starts_with("education")) |>
select(respondent_id, starts_with("education"))
demographics |>
pivot_longer(cols = starts_with("education")) |>
select(respondent_id, starts_with("education"))
demographics |>
select(respondent_id, starts_with("education")) |>
pivot_longer(cols = starts_with("education"))
demographics |>
select(respondent_id, gender, age_years, race) |>
pivot_longer(cols = any_of(gender, age_years, race))
demographics |>
select(respondent_id, gender, age_years, race) |>
pivot_longer(cols = any_of(c("gender", "age_years", "race")))
demographics |>
select(respondent_id, gender, age_years, race) |>
pivot_longer(cols = all_of(c("gender", "age_years", "race")))
demographics |>
select(respondent_id, gender, age_years, race) |>
pivot_longer(cols = all_of(c("gender", "marital_status", "race")))
demographics |>
select(respondent_id, gender, marital_status, race) |>
pivot_longer(cols = all_of(c("gender", "marital_status", "race")))
n_unique(labs$respondent_id)
unique(labs$respondent_id)
n_distinct(labs$respondent_id)
length(unique((labs$respondent_id))
)
length(unique(labs$respondent_id))
labs
# Chunk 1
# load the tidyverse, the demographics, and the urine_albumin_creatinine data
library(tidyverse)
demographics <- read_csv("data/demographics.csv")
labs <- read_csv("data/urine_albumin_creatinine.csv")
# Compute the proportion of people in demographics who are also in labs
sum(demographics$respondent_id %in% labs$respondent_id) / length(unique(labs$respondent_id))
n_distinct(labs$respondent_id)
# Compute the proportion of people in demographics who are also in labs
sum(demographics$respondent_id %in% labs$respondent_id) / n_distinct(labs$respondent_id)
# Compute the proportion of people in demographics who are also in labs
sum(demographics$respondent_id %in% labs$respondent_id) / n_distinct(demographics$respondent_id)
# proportion of people in labs who are also in demographics
sum(labs$respondent_id %in% demographics$respondent_id) / n_distinct(labs$respondent_id)
# proportion of people in labs who are also in demographics
sum(labs$respondent_id %in% demographics$respondent_id) / n_distinct(labs$respondent_id)
labs$respondent_id %in% demographics$respondent_id
n_distinct(labs$respondent_id)
nrow(labs)
sum(labs$respondent_id %in% demographics$respondent_id)
# proportion of people in labs who are also in demographics
sum(unique(labs$respondent_id) %in% unique(demographics$respondent_id)) / n_distinct(labs$respondent_id)
# Compute the proportion of people in demographics who are also in labs
sum(unique(demographics$respondent_id) %in% unique(labs$respondent_id)) / n_distinct(demographics$respondent_id)
# are the respondent ID values in demographics unique?
identical(unique(demographics$respondent_id), demographics$respondent_id)
# check whether the respondent ID values in labs are unique?
identical(unique(labs$respondent_id), labs$respondent_id)
# Compute the proportion of people in demographics who are also in labs
sum(unique(demographics$respondent_id) %in% unique(labs$respondent_id)) / n_distinct(demographics$respondent_id)
print(left_join(demographics, labs, by = "respondent_id"), width = Inf)
print(full_join(demographics, labs, by = "respondent_id"), width = Inf)
# check the number of rows in the joined data
nrow(left_join(demographics, labs, by = "respondent_id"))
nrow(demographics)
# join demographics and labs_wide
print(left_join(demographics, labs_wide, by = "respondent_id"), width = Inf)
# compute the wide format of the labs data
labs_wide <- labs |>
pivot_wider(names_from = "lab",
values_from = "measurement")
labs_wide
# join demographics and labs_wide
print(left_join(demographics, labs_wide, by = "respondent_id"), width = Inf)
# apply add_x2y() to x = 2 and y = 3 and output_type = "logical"
#| error: true
add_x2y(2, 3, output_type = "logical")
# apply add_x2y() to x = 2 and y = 3 with no output_type specified
add_x2y(2, 3)
# Chunk 1
# define a function called `add_one()` that adds 1 to its argument, x
add_one <- function(x) {
x + 1
}
# Chunk 2
# apply function add_one() to 5
add_one(5)
# Chunk 3
# apply function add_one() to 5 using a *named argument*
add_one(x = 5)
# Chunk 4
# re-define add_one() with two lines of code: x - 1 and x + 1
add_one <- function(x) {
x - 1
x + 1
}
# Chunk 5
# apply add_one to 5 again
add_one(5)
# Chunk 6
# redefine add_one() but apply the return statement to x - 1 only
add_one <- function(x) {
return(x - 1)
x + 1
}
# Chunk 7
# apply add_one to 5 again
add_one(5)
# Chunk 9
# define function cube()
cube <- function(value) {
cubed_value = value^3
return(cubed_value)
}
# Chunk 10
# apply cube() to 3
cube(value = 3)
# Chunk 11
# define a function called add_x2y that computes x + 2y
add_x2y <- function(x, y) {
x + 2*y
}
# Chunk 12
# apply add_x2y() to x = 2 and y = 5
add_x2y(2, 5)
# Chunk 13
add_x2y(y = 2, 5)
# Chunk 14
# run add_x2y() with named arguments x = 2 and y = 5
add_x2y(x = 2, y = 5)
# Chunk 15
# run add_x2y() with named arguments y = 5 and x = 2
add_x2y(y = 5, x = 2)
# Chunk 16
#| error: true
y
